---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import PageTitle from '../../components/PageTitle.astro';

// Definir tipos para los videos
type VideoItem = {
  slug: string;
  body: string;
  data: {
    titulo: string;
    fecha: Date;
    fuente: string;
    canal: string;
    url: string;
    embedUrl: string;
    duracion?: string;
    descripcion?: string;
    esDiscurso?: boolean;
    [key: string]: any;
  };
};

// Obtener todos los videos
const videos = (await getCollection('videos')) as unknown as VideoItem[];

// Obtener discursos con video
type DiscursoItem = {
  slug: string;
  body: string;
  data: {
    titulo: string;
    fecha: Date;
    resumen: string;
    fuente: string;
    autor: string;
    video?: boolean;
    canal?: string;
    duracion?: string;
    url?: string;
    embedUrl?: string;
    esDiscurso?: boolean;
  };
};

const discursosConVideo = ((await getCollection('discursos')) as unknown as DiscursoItem[])
  .filter(discurso => discurso.data.video === true)
  .map(discurso => {
    // Extraer URL del iframe del contenido del discurso
    const iframeMatch = discurso.body.match(/<iframe[^>]+src=["']([^"']+)["']/);
    const embedUrl = iframeMatch ? iframeMatch[1] : '';
    
    return {
      ...discurso,
      data: {
        ...discurso.data,
        // Usar la URL extraída del iframe como URL del video
        url: embedUrl,
        embedUrl: embedUrl,
        // Marcar como discurso
        esDiscurso: true,
        // Asegurarse de que haya un canal para mostrar
        canal: discurso.data.canal || 'Discurso',
        // Asegurar que haya una duración
        duracion: discurso.data.duracion || '--:--',
        // Asegurar que haya una descripción
        descripcion: discurso.data.resumen || ''
      }
    } as VideoItem;
  });

// Combinar y ordenar por fecha (más reciente primero)
const allVideos: VideoItem[] = [...videos, ...discursosConVideo]
  .sort((a, b) => b.data.fecha.getTime() - a.data.fecha.getTime());

// Función para obtener la miniatura de YouTube de una URL
const getYoutubeThumbnail = (url?: string): string | null => {
  if (!url) return null;
  
  try {
    const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
    const match = url.match(regExp);
    if (match && match[2] && match[2].length === 11) {
      return `https://img.youtube.com/vi/${match[2]}/hqdefault.jpg`;
    }
  } catch (error) {
    console.error('Error al procesar la URL del video:', error);
  }
  return null;
};

// Función para formatear la fecha
const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat('es-UY', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
};

// Las funciones getYoutubeThumbnail y formatDate ya están definidas más arriba
---

<Layout 
  title="Videos" 
  description="Colección de discursos, entrevistas y apariciones públicas de José 'Pepe' Mujica"
>
  <PageTitle 
    title="Videos" 
    description="Discursos, entrevistas y apariciones públicas de José 'Pepe' Mujica"
  />

  <div class="videos-container">
    {allVideos.length > 0 ? (
      <div class="videos-grid">
        {allVideos.map((video) => {
          const thumbnail = getYoutubeThumbnail(video.data.url);
          
          return (
            <a 
              href={video.data.esDiscurso ? `/discursos/${video.slug}` : `/videos/${video.slug}`} 
              class={`video-card ${video.data.esDiscurso ? 'discurso-card' : ''}`}
            >
              <div class="video-thumbnail">
                {thumbnail ? (
                  <>
                    <img 
                      src={thumbnail} 
                      alt={`Miniatura de ${video.data.titulo}`}
                      loading="lazy"
                    />
                    <div class="video-duration">{video.data.duracion}</div>
                  </>
                ) : (
                  <div class="video-thumbnail-placeholder">
                    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
                      <polygon points="23 7 16 12 23 17 23 7"></polygon>
                      <rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
                    </svg>
                    <div class="video-duration">{video.data.duracion}</div>
                  </div>
                )}
              </div>
              <div class="video-info">
                <h3 class="video-title">
                  {video.data.titulo}
                  {video.data.esDiscurso && (
                    <span class="video-tag">Discurso</span>
                  )}
                </h3>
                <div class="video-meta">
                  {!video.data.esDiscurso && (
                    <span class="video-channel">{video.data.canal}</span>
                  )}
                  <span class="video-date">{formatDate(video.data.fecha)}</span>
                </div>
              </div>
            </a>
          );
        })}
      </div>
    ) : (
      <p class="no-content">No hay videos disponibles en este momento.</p>
    )}
  </div>
</Layout>

<style>
  .videos-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem 4rem;
  }
  
  .videos-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
  }
  
  .video-card {
    display: block;
    text-decoration: none;
    color: inherit;
    background: white;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s, box-shadow 0.2s;
  }
  
  .video-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);
  }
  
  .video-thumbnail {
    position: relative;
    width: 100%;
    padding-bottom: 56.25%; /* 16:9 Aspect Ratio */
    background-color: #f5f5f5;
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 0.75rem;
  }
  
  .video-thumbnail-placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f0f0f0;
    color: #999;
  }
  
  .video-thumbnail-placeholder svg {
    width: 30%;
    height: 30%;
    opacity: 0.7;
  }
  
  .video-thumbnail img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .video-duration {
    position: absolute;
    bottom: 0.5rem;
    right: 0.5rem;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
  }
  
  .video-info {
    padding: 1rem;
  }
  
  .video-title {
    margin: 0.5rem 0 0.25rem 0;
    font-size: 1.1rem;
    font-weight: 600;
    color: #333;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    flex-wrap: wrap;
  }
  
  .video-title .video-tag {
    font-size: 0.7rem;
    background: rgba(138, 99, 210, 0.12);
    color: #6d28d9;
    padding: 0.2rem 0.6rem;
    border-radius: 1rem;
    border: 1px solid rgba(138, 99, 210, 0.25);
    font-weight: 500;
  }
  
  .video-meta {
    display: flex;
    justify-content: space-between;
    font-size: 0.85rem;
    color: #6b7280;
  }
  
  .no-content {
    text-align: center;
    padding: 4rem 2rem;
    color: #6b7280;
    font-style: italic;
    background: #f9fafb;
    border-radius: 8px;
  }
  
  @media (max-width: 768px) {
    .videos-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
